/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus



#include <stdlib.h>
#include "unistd.h"
#include <iostream>
using namespace std;


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
static yyconst short int yy_acclist[474] =
    {   0,
      145,  144,  143,  144,  105,  144,  114,  144,   96,  144,
      104,  144,   95,  144,  144,  115,  144,  116,  144,  102,
      144,  100,  144,   91,  144,  101,  144,   99,  144,  103,
      144,  134,  144,  134,  144,   94,  144,   89,  144,  107,
      144,   92,  144,  108,  144,  109,  144,  110,  144,  138,
      144,  113,  144,  112,  144,   98,  144,  111,  144,  138,
      144,  138,  144,  138,  144,  138,  144,  138,  144,  138,
      144,  138,  144,  138,  144,  138,  144,  138,  144,  138,
      144,  138,  144,  138,  144,  138,  144,  138,  144,  138,
      144,  138,  144,  138,  144,   93,  144,   97,  144,   90,

      144,  106,  144,  141,  144,  144,   58,  129,  137,  136,
       65,   11,    9,  130,   73,   66,   50,   72,   24,   64,
       68,  135,   21,  140,  139,   26,  135,  134,   71,   79,
       60,   59,   56,   28,   57,   80,   20,  138,   88,  138,
      138,   10,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   27,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   48,  138,  138,  138,  138,  138,
      138,   62,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   70,   12,  142,  137,
      136,   74,   33,  139,  133,  135,  132,  131,   81,  138,

       61,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   43,  138,  138,  138,  138,  138,  123,  138,  138,
       67,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   86,  138,  138,  138,  138,
      138,   63,  138,  138,  117,  138,  138,  125,  138,   16,
      138,  138,  138,  119,  138,  138,  138,  138,  138,  138,
      138,   32,  138,   34,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   47,  138,  138,  138,  138,  124,
      138,    7,  138,  138,  138,  138,  138,  122,  138,  138,

      138,  138,  138,  138,  138,  138,    5,  138,  138,  126,
      138,  138,  138,   53,   69,  138,   15,  138,   17,  138,
      138,   18,  138,   19,  138,   22,  138,  138,  138,  138,
      138,  138,  138,  138,  138,    6,  138,   41,  138,  121,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,    4,  138,  138,   85,
      138,  128,  138,  127,  138,   87,  138,   13,   29,  138,
      138,  138,  138,  120,  138,   35,  138,   36,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       76,  138,  138,  138,  138,  138,   78,  138,   82,  138,

      118,  138,   84,  138,   31,  138,  138,  138,   25,  138,
      138,  138,  138,   40,  138,   42,  138,   44,  138,  138,
      138,   51,  138,  138,   75,  138,  138,  138,  138,  138,
       52,  138,   30,   83,    8,  138,  138,   23,  138,  138,
      138,   39,  138,   45,  138,  138,  138,  138,  138,  138,
       14,   54,   46,  138,  138,   38,  138,  138,   55,  138,
       77,  138,  138,    1,  138,   37,  138,   49,  138,  138,
      138,    2,    3
    } ;

static yyconst short int yy_accept[422] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    5,    7,    9,
       11,   13,   15,   16,   18,   20,   22,   24,   26,   28,
       30,   32,   34,   36,   38,   40,   42,   44,   46,   48,
       50,   52,   54,   56,   58,   60,   62,   64,   66,   68,
       70,   72,   74,   76,   78,   80,   82,   84,   86,   88,
       90,   92,   94,   96,   98,  100,  102,  104,  106,  107,
      108,  108,  109,  109,  110,  111,  112,  113,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  115,  116,  117,
      118,  119,  120,  121,  122,  122,  123,  124,  125,  126,
      127,  128,  128,  128,  128,  128,  128,  129,  130,  131,

      132,  133,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  144,  145,  146,  147,  148,  149,  150,  151,
      152,  153,  155,  156,  157,  158,  159,  160,  161,  162,
      163,  164,  165,  167,  168,  169,  170,  171,  172,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  189,  190,  191,  192,  192,
      192,  192,  192,  192,  192,  193,  194,  195,  196,  196,
      197,  198,  199,  199,  200,  201,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  224,  225,  226,  227,

      228,  230,  231,  233,  234,  235,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  245,  246,  248,  249,  250,
      251,  252,  254,  254,  254,  254,  254,  254,  254,  254,
      255,  257,  258,  260,  262,  263,  264,  266,  267,  268,
      269,  270,  271,  272,  274,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  287,  288,  289,  290,  292,
      294,  295,  296,  297,  298,  300,  301,  302,  303,  304,
      305,  306,  307,  309,  310,  312,  313,  314,  314,  314,
      314,  315,  315,  315,  315,  316,  317,  319,  321,  322,
      324,  326,  328,  329,  330,  331,  332,  333,  334,  335,

      336,  338,  340,  342,  343,  344,  345,  346,  347,  348,
      349,  350,  351,  352,  353,  354,  355,  356,  357,  359,
      360,  362,  364,  366,  368,  369,  369,  369,  369,  369,
      370,  370,  371,  372,  373,  374,  376,  378,  380,  381,
      382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
      393,  394,  395,  396,  397,  399,  401,  403,  405,  405,
      405,  406,  406,  406,  407,  408,  409,  411,  412,  413,
      414,  416,  418,  420,  421,  422,  424,  425,  427,  428,
      429,  430,  431,  433,  433,  434,  434,  435,  437,  438,
      440,  441,  442,  444,  446,  447,  448,  449,  450,  450,

      451,  452,  453,  455,  456,  458,  459,  461,  463,  464,
      465,  466,  468,  470,  471,  472,  472,  472,  473,  474,
      474
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    1,    5,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   28,   30,   31,   28,
       32,   32,   33,   32,   32,   32,   32,   32,   34,   32,
       32,   32,   35,   32,   32,   32,   32,   36,   32,   32,
       37,   38,   39,   40,   32,   41,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   32,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   32,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[70] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[430] =
    {   0,
        0,    0,   68,   69,  523,  524,  524,  498,   68,   56,
      497,   70,   70,   38,  524,   71,   74,  524,   75,   92,
      102,  112,  104,  499,  524,   67,   77,   79,  494,  524,
        0,  524,  524,  494,  524,   74,   79,  105,   59,  107,
      114,  462,  125,  461,   79,  457,   26,  468,  102,   87,
      130,  464,  457,  524,  114,  524,  524,  524,  104,  524,
      145,  524,  509,    0,    0,  524,  524,  524,  160,  524,
      508,  454,  453,  455,  452,  459,  444,  479,  524,  524,
      524,  524,  524,  524,  487,  168,  524,  524,    0,  524,
      172,  189,  176,  205,  178,    0,  211,  524,  524,  524,

      524,  445,  524,  524,  524,  476,  524,    0,  524,  440,
      453,    0,  442,  450,  435,  141,  433,  451,  160,  438,
      444,  429,  440,  429,  442,  426,  433,  430,  428,  424,
      427,  420,    0,  423,  161,  424,  414,  424,    0,  161,
      432,  190,  185,  418,  423,  414,  109,  406,  416,  414,
      418,  409,  524,  524,  222,  524,    0,    0,  411,  404,
      409,  403,  420,  403,  524,  524,    0,  195,  234,  241,
      222,    0,  411,  524,  399,    0,  406,  415,  410,  409,
      410,  399,  394,  392,  396,  177,  407,  405,  392,  400,
      208,  399,  385,  401,  400,  395,  396,  384,  386,  385,

      390,  387,    0,  382,  371,  372,  379,  132,  369,  368,
      368,  377,  380,  365,  369,  377,    0,  362,  361,  366,
      367,    0,  366,  374,  374,  200,  363,  364,  357,  354,
        0,  360,    0,    0,  361,  365,    0,  349,  361,  346,
      355,  343,  351,    0,  352,  346,  337,  350,  344,  351,
      344,  335,  352,  333,    0,  346,  330,  332,    0,    0,
      347,  342,  337,  233,    0,  336,  327,  334,  329,  324,
      337,  317,    0,  333,    0,  330,  331,  224,  324,  315,
      524,  326,  363,  318,  524,  329,    0,    0,  310,    0,
        0,    0,  315,  316,  321,  319,  307,  314,  313,  317,

        0,  309,    0,  316,  309,  305,  312,  309,  295,  310,
      309,  297,  297,  290,  291,  294,  303,  298,    0,  296,
        0,    0,    0,    0,  524,  302,  297,  332,  295,  524,
      292,  295,  288,  276,  276,    0,    0,  289,  274,  281,
      273,  266,  281,  274,  282,  281,  284,  279,  264,    0,
      262,  262,  263,  274,    0,    0,    0,    0,  265,  308,
      524,  259,  306,  255,  259,  267,    0,  270,  267,  264,
        0,    0,    0,  255,  254,    0,  263,    0,  260,  262,
      295,  253,    0,  292,  524,  291,  524,    0,  246,    0,
      255,  249,    0,    0,  237,  250,  248,  217,  255,  210,

      524,  524,    0,  213,    0,  197,    0,    0,  203,  524,
      200,    0,    0,  236,  235,  143,  132,  524,  524,  524,
      271,  275,  277,  281,  283,  285,  287,  291,  136
    } ;

static yyconst short int yy_def[430] =
    {   0,
      420,    1,  421,  421,  420,  420,  420,  420,  422,  423,
      420,  420,  424,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      425,  420,  420,  420,  420,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  420,  420,  420,  420,  420,  420,  420,
      422,  420,  422,  426,  427,  420,  420,  420,  424,  420,
      424,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  428,  420,
      420,  420,  420,  420,  420,  429,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  425,  420,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  420,  420,  420,  420,  426,  427,  420,  420,
      420,  420,  420,  420,  420,  420,  428,  420,  420,  420,
      420,  429,  420,  420,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  420,  420,  420,  420,  420,  420,  420,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  420,  420,  420,
      420,  420,  420,  420,  420,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  420,  420,  420,  420,  420,  420,
      420,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  420,  420,
      420,  420,  420,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  420,  420,  420,  420,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  420,  425,

      420,  420,  425,  425,  425,  425,  425,  425,  425,  420,
      425,  425,  425,  425,  425,  420,  420,  420,  420,    0,
      420,  420,  420,  420,  420,  420,  420,  420,  420
    } ;

static yyconst short int yy_nxt[594] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   23,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   32,    6,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   31,   43,
       31,   44,   31,   45,   46,   47,   31,   48,   49,   50,
       51,   31,   52,   53,   31,   54,   55,   56,   57,   58,
       58,   62,   64,   64,   64,   64,   67,   70,   59,   59,
       72,   78,   73,  140,   74,   80,  141,   75,   82,   99,
      100,  101,  102,   68,   79,   76,   77,   81,   83,   84,

      103,  104,  105,  106,  121,   63,   85,   71,   86,   86,
       86,   86,   88,  122,  155,   87,  110,   89,   91,  156,
       97,   97,   97,   97,  137,   90,   91,  111,   92,   92,
       92,   92,  112,  113,   94,  146,  114,  153,  172,  138,
       93,  419,   94,  115,  147,   95,  116,   96,   62,   94,
      123,  117,  418,  118,   93,  127,  119,   94,  124,  120,
      125,  143,  144,  128,  145,  129,   95,   70,  130,  216,
      126,  133,  148,  217,  131,   96,  264,  134,  135,  149,
      154,  150,   63,  265,   86,   86,   86,   86,   86,   86,
       86,   86,  168,  168,  171,  171,  171,   71,   94,  180,

      181,  184,   94,   91,  200,   92,   92,   92,   92,  281,
      205,  168,  168,   94,  185,  206,  169,   94,  169,   94,
      201,  170,  170,  170,  170,   91,  211,   97,   97,   97,
       97,  208,  155,  325,   94,  240,  241,  156,  171,  171,
      171,   94,  212,  417,  416,  282,  209,  415,  414,  210,
      170,  170,  170,  170,  246,  413,   94,  170,  170,  170,
      170,  412,  312,  411,  410,  313,  247,  314,  409,  326,
      248,    6,    6,    6,    6,   61,   61,   61,   61,   65,
       65,   69,   69,   69,   69,  108,  108,  157,  157,  158,
      158,  167,  408,  167,  167,  407,  406,  405,  404,  403,

      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,

      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  245,  244,  243,  242,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  215,  214,  213,  207,  204,  203,  202,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  183,  182,  179,  178,  177,  176,  175,  174,

      173,  166,  165,  164,  163,  162,  161,  160,  159,  420,
      420,  152,  151,  142,  139,  136,  132,  109,  107,   98,
       66,   60,  420,    5,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420

    } ;

static yyconst short int yy_chk[594] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    9,   10,   10,   10,   10,   12,   13,    3,    4,
       14,   16,   14,   47,   14,   17,   47,   14,   19,   26,
       26,   26,   26,   12,   16,   14,   14,   17,   19,   19,

       27,   27,   28,   28,   39,    9,   20,   13,   20,   20,
       20,   20,   21,   39,   59,   20,   36,   21,   23,   59,
       23,   23,   23,   23,   45,   21,   22,   36,   22,   22,
       22,   22,   36,   37,   23,   50,   37,   55,  429,   45,
       22,  417,   22,   37,   50,   22,   38,   22,   61,   23,
       40,   38,  416,   38,   22,   41,   38,   22,   40,   38,
       40,   49,   49,   41,   49,   41,   22,   69,   41,  147,
       40,   43,   51,  147,   41,   22,  208,   43,   43,   51,
       55,   51,   61,  208,   86,   86,   86,   86,   91,   91,
       91,   91,   93,   93,   95,   95,   95,   69,   86,  116,

      116,  119,   91,   92,  135,   92,   92,   92,   92,  226,
      140,  168,  168,   86,  119,  140,   94,   91,   94,   92,
      135,   94,   94,   94,   94,   97,  143,   97,   97,   97,
       97,  142,  155,  278,   92,  186,  186,  155,  171,  171,
      171,   97,  143,  415,  414,  226,  142,  411,  409,  142,
      169,  169,  169,  169,  191,  406,   97,  170,  170,  170,
      170,  404,  264,  400,  399,  264,  191,  264,  398,  278,
      191,  421,  421,  421,  421,  422,  422,  422,  422,  423,
      423,  424,  424,  424,  424,  425,  425,  426,  426,  427,
      427,  428,  397,  428,  428,  396,  395,  392,  391,  389,

      386,  384,  382,  381,  380,  379,  377,  375,  374,  370,
      369,  368,  366,  365,  364,  363,  362,  360,  359,  354,
      353,  352,  351,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  335,  334,  333,  332,  331,
      329,  328,  327,  326,  320,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      302,  300,  299,  298,  297,  296,  295,  294,  293,  289,
      286,  284,  283,  282,  280,  279,  277,  276,  274,  272,
      271,  270,  269,  268,  267,  266,  263,  262,  261,  258,
      257,  256,  254,  253,  252,  251,  250,  249,  248,  247,

      246,  245,  243,  242,  241,  240,  239,  238,  236,  235,
      232,  230,  229,  228,  227,  225,  224,  223,  221,  220,
      219,  218,  216,  215,  214,  213,  212,  211,  210,  209,
      207,  206,  205,  204,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  190,  189,  188,  187,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  175,  173,
      164,  163,  162,  161,  160,  159,  152,  151,  150,  149,
      148,  146,  145,  144,  141,  138,  137,  136,  134,  132,
      131,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  118,  117,  115,  114,  113,  111,  110,  106,

      102,   85,   78,   77,   76,   75,   74,   73,   72,   71,
       63,   53,   52,   48,   46,   44,   42,   34,   29,   24,
       11,    8,    5,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420

    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"

    #include "Code\HelperCode.h"
	using namespace banana;

	#include "yacc.hpp"

	#include <iostream>
	#include <istream>
	#include <ostream>
	#include <stack>
	#include <stdlib.h>
	#include "FlexLexer.h"

	using namespace std;

	char* str;
	
	void updateLocation(int length)
	{
		col += length;

		yylval.r.myColno = col;
		yylval.r.myLineNo = line;
	}

	void copyTextToStrAndUpdateLocation(const char* x,int length)
	{
		yylval.r.str = new char[255];
		yylval.r.str[0] = '\0';
		strcpy_s(yylval.r.str,255 , x);

		updateLocation(length);		
	}

#define multilinecomment 1

#line 697 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 41 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"


#line 827 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 421 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 524 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 43 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_READ_INT;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 44 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_READ_DOUBLE;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_READ_STRING;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_SUPER;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_TRUE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FALSE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_NULL;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 51 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ABSTRACT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 52 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_AND_EQUAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 53 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_AS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 54 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_BOOLEAN_AND;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 55 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_BOOLEAN_OR;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 56 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_BOOL_CAST;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 57 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_BOOL_CAST;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 58 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_BREAK;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 59 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CASE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 60 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CATCH;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 61 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CLASS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 62 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CLONE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 63 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CLOSE_TAG_PHP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 64 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CONCAT_EQUAL;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 65 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CONST;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 66 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_CONTINUE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 67 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DEC;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 68 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DEFAULT;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 69 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DIV_EQUAL;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 70 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DO;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 71 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DOUBLE_ARROW;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 72 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DOUBLE_CAST;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 73 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DOUBLE_CAST;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 74 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_DOUBLE_CAST;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 75 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ECHO;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 76 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ELLIPSIS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 77 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ELSE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 78 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ELSEIF;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 79 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ENDFOR;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 80 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ENDFOREACH;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 81 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ENDSWITCH;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 82 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_ENDWHILE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 83 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_EXTENDS;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 84 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FINAL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 85 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FINALLY;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 86 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FOR;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 87 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FOREACH;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 88 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FUNCTION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 89 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_FUNCTION;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 90 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_GOTO;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 91 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IF;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 92 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IMPLEMENTS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 93 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INC;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INCLUDE;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INCLUDE_ONCE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INT_CAST;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INT_CAST;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_INTERFACE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IS_EQUAL;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IS_GREATER_OR_EQUAL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IS_NOT_EQUAL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IS_NOT_EQUAL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_IS_SMALLER_OR_EQUAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_LOGICAL_AND;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_LOGICAL_OR;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_LOGICAL_XOR;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_MINUS_EQUAL;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_MOD_EQUAL;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_MUL_EQUAL;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 113 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_NEW;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 114 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_OBJECT_OPERATOR;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 115 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_OPEN_TAG_PHP;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 116 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_OR_EQUAL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 117 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_PAAMAYIM_NEKUDOTAYIM;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 118 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_PLUS_EQUAL;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 119 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_POW;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 120 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_POW_EQUAL;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 121 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_PRIVATE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 122 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_PUBLIC;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 123 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_PROTECTED;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 124 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_RETURN;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 125 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_SL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 126 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_SR;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 127 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_SR_EQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 128 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_STATIC;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 129 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_STRING_CAST;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 130 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_SWITCH;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 131 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_THROW;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 132 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_TRY;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 133 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_WHILE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 134 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return T_XOR_EQUAL;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 137 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return ';' ;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 138 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '}' ;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 139 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return ',' ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 140 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '=' ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 141 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '{' ;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 142 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return ':' ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 143 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '&' ;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 144 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '$' ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 145 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '|' ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 146 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '^' ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 147 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '.' ;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 148 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '+' ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 149 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '-' ;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 150 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '*' ;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 151 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '/' ;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 152 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '%' ;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 153 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '!' ;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 154 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '~' ;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 155 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '<' ;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 156 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '>' ;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 157 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '?' ;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 158 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '@' ;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 159 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '`' ;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 160 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return ']' ;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 161 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '[' ;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 162 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '\"' ;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 164 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return '(' ;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 165 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); updateLocation(yyleng); return ')' ;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 169 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_BOOL;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_STRING;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_CHAR;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_DOUBLE;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_FLOAT;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_REAL;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng);  return T_V_INT;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_LONG;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 180 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_BYTE;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 181 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_UINT;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 182 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_ULONG;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 183 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX(yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); return T_V_UBYTE;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 187 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{
						debuggerLEX("stringvalue = ", yytext);
						
						copyTextToStrAndUpdateLocation(yytext,yyleng);
						
						for(int i = 0; i < yyleng;i++)
						{
							 if(yytext[i] == '\n')
							 {
								 line++;
								 col = 1;
							 }
							 else
								col++;
						}

						yylval.r.stringvalue = yytext;
						return T_CONSTANT_ENCAPSED_STRING;
					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 208 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{
						debuggerLEX("stringvalue = ", yytext);

						copyTextToStrAndUpdateLocation(yytext,yyleng); 
						for(int i = 0; i < yyleng;i++)
						{
								if(yytext[i] == '\n')
								{
									line++;
									col = 1;
								}
								else
									col++;
						}
				
						return T_CONSTANT_ENCAPSED_STRING;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 226 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX("Hex value = " , yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); yylval.r.intvalue = atoi(yytext); return T_LNUMBER; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 227 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX("Octa value = " , yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); yylval.r.intvalue = atoi(yytext); return T_LNUMBER; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 228 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX("Bin value = " ,yytext); copyTextToStrAndUpdateLocation(yytext,yyleng); yylval.r.intvalue = atoi(yytext); return T_LNUMBER; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 230 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ /// \s*[+-]?\s*[0-9]+\s*
	debuggerLEX("Integer value = ", yytext);

								copyTextToStrAndUpdateLocation(yytext,yyleng);
								yylval.r.intvalue = atoi(yytext);

								return T_LNUMBER;
							}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{
								 debuggerLEX("float point value = " , yytext); 
			
								 copyTextToStrAndUpdateLocation(yytext,yyleng);
								 yylval.r.floatvalue = atof(yytext);

								 return T_DNUMBER;
							}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 248 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{
								debuggerLEX("ID = " , yytext);
								
								copyTextToStrAndUpdateLocation(yytext,yyleng);
							
								return T_VARIABLE;
							}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 255 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ 
							debuggerLEX("ID = " , yytext);
							
							errorhandler("wrong identifier",yytext);
							copyTextToStrAndUpdateLocation(yytext,yyleng);

							return T_VARIABLE;
						}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 264 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{
							debuggerLEX("Name = ", yytext);
							
							copyTextToStrAndUpdateLocation(yytext,yyleng);

							return T_STRING;
						}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 272 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ debuggerLEX("it is a Single Line Comment"); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 274 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ BEGIN multilinecomment; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 275 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ line++; col = 1;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 276 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ BEGIN INITIAL; debuggerLEX("it is a Multi Line Comment");}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 278 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
{ line++; col = 1;  }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 280 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
ECHO;
	YY_BREAK
#line 1705 "lex.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(multilinecomment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	////(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 421 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 421 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 420);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 280 "C:\\Users\\01\\Desktop\\X\\CompilerProject\\compiler project\\lex.l"
